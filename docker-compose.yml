version: '3.8'

services:
  # Main application
  sports-prediction-bot:
    build:
      context: .
      target: production
    container_name: sports-prediction-bot
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - ESPN_API_KEY=${ESPN_API_KEY}
      - SPORTRADAR_API_KEY=${SPORTRADAR_API_KEY}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_DYNAMODB_TABLE=${AWS_DYNAMODB_TABLE}
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/sports_predictions
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-False}
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - redis
      - mongodb
    networks:
      - sports-prediction-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: sports-prediction-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sports-prediction-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # MongoDB for data storage
  mongodb:
    image: mongo:6
    container_name: sports-prediction-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=sports_predictions
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - sports-prediction-network

  # Data collection worker
  data-collector:
    build:
      context: .
      target: production
    container_name: sports-prediction-data-collector
    restart: unless-stopped
    environment:
      - ESPN_API_KEY=${ESPN_API_KEY}
      - SPORTRADAR_API_KEY=${SPORTRADAR_API_KEY}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/sports_predictions
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - mongodb
    networks:
      - sports-prediction-network
    command: ["python", "-m", "src.sports_prediction.cli", "collect-data", "--continuous"]

  # Model training worker
  model-trainer:
    build:
      context: .
      target: production
    container_name: sports-prediction-model-trainer
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/sports_predictions
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - redis
      - mongodb
    networks:
      - sports-prediction-network
    command: ["python", "-m", "src.sports_prediction.cli", "train-models", "--schedule"]

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sports-prediction-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - sports-prediction-bot
    networks:
      - sports-prediction-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sports-prediction-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - sports-prediction-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sports-prediction-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - sports-prediction-network

volumes:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  sports-prediction-network:
    driver: bridge
