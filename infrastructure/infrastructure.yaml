AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sports Prediction Bot - Complete AWS Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: sports-prediction-bot
    Description: Project name for resource naming
  
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
  
  TelegramBotToken:
    Type: String
    NoEcho: true
    Description: Telegram Bot Token
  
  EspnApiKey:
    Type: String
    NoEcho: true
    Description: ESPN API Key
  
  SportradarApiKey:
    Type: String
    NoEcho: true
    Description: Sportradar API Key
  
  OddsApiKey:
    Type: String
    NoEcho: true
    Description: Odds API Key

Mappings:
  EnvironmentMap:
    dev:
      InstanceClass: cache.t3.micro
      DocumentDBInstanceClass: db.t3.medium
      MinCapacity: 1
      MaxCapacity: 3
    staging:
      InstanceClass: cache.t3.small
      DocumentDBInstanceClass: db.r5.large
      MinCapacity: 1
      MaxCapacity: 5
    prod:
      InstanceClass: cache.r6g.large
      DocumentDBInstanceClass: db.r5.xlarge
      MinCapacity: 2
      MaxCapacity: 10

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-vpc'
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-2'

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidr, 6, 8]]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [!Ref VpcCidr, 6, 8]]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-2'

  # NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-routes-1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-apprunner-sg'
      GroupDescription: Security group for App Runner service
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-apprunner-sg'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-database-sg'
      GroupDescription: Security group for database services
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref AppRunnerSecurityGroup
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref AppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-database-sg'

  # S3 Bucket for Models
  ModelsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-models-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-models'
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB Table
  PredictionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-predictions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: prediction_id
          AttributeType: S
        - AttributeName: match_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: prediction_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: match-index
          KeySchema:
            - AttributeName: match_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-predictions'
        - Key: Environment
          Value: !Ref Environment

  # ElastiCache Redis Subnet Group
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis cluster
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # ElastiCache Redis Cluster
  RedisCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: !Sub '${ProjectName}-${Environment}-redis'
      Description: Redis cluster for caching
      NodeType: !FindInMap [EnvironmentMap, !Ref Environment, InstanceClass]
      Port: 6379
      ParameterGroupName: default.redis7
      NumCacheClusters: 2
      Engine: redis
      EngineVersion: 7.0
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      SecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      AtRestEncryptionEnabled: true
      TransitEncryptionEnabled: true
      MultiAZEnabled: true
      AutomaticFailoverEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-redis'
        - Key: Environment
          Value: !Ref Environment

  # DocumentDB Subnet Group
  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for DocumentDB cluster
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-docdb-subnet-group'

  # DocumentDB Cluster
  DocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${ProjectName}-${Environment}-docdb'
      MasterUsername: admin
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DocumentDBSecret}:SecretString:password}}'
      Engine: docdb
      Port: 27017
      DBSubnetGroupName: !Ref DocumentDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      StorageEncrypted: true
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-docdb'
        - Key: Environment
          Value: !Ref Environment

  # DocumentDB Instance
  DocumentDBInstance:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceIdentifier: !Sub '${ProjectName}-${Environment}-docdb-instance'
      DBInstanceClass: !FindInMap [EnvironmentMap, !Ref Environment, DocumentDBInstanceClass]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-docdb-instance'
        - Key: Environment
          Value: !Ref Environment

  # Secrets Manager for DocumentDB
  DocumentDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-docdb-credentials'
      Description: DocumentDB master credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-docdb-credentials'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for App Runner
  AppRunnerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-apprunner-instance-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${ModelsBucket}/*'
                  - !GetAtt ModelsBucket.Arn
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt PredictionsTable.Arn
                  - !Sub '${PredictionsTable.Arn}/index/*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DocumentDBSecret
                  - !Ref AppSecrets
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-apprunner-instance-role'
        - Key: Environment
          Value: !Ref Environment

  # App Runner Access Role
  AppRunnerAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-apprunner-access-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: build.apprunner.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-apprunner-access-role'
        - Key: Environment
          Value: !Ref Environment

  # Secrets Manager for Application Secrets
  AppSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-app-secrets'
      Description: Application secrets for sports prediction bot
      SecretString: !Sub |
        {
          "TELEGRAM_BOT_TOKEN": "${TelegramBotToken}",
          "ESPN_API_KEY": "${EspnApiKey}",
          "SPORTRADAR_API_KEY": "${SportradarApiKey}",
          "ODDS_API_KEY": "${OddsApiKey}",
          "SECRET_KEY": "${AWS::StackId}"
        }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-app-secrets'
        - Key: Environment
          Value: !Ref Environment

  # VPC Connector for App Runner
  VpcConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      VpcConnectorName: !Sub '${ProjectName}-${Environment}-vpc-connector'
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref AppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-vpc-connector'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${ProjectName}-${Environment}-vpc-id'

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${ProjectName}-${Environment}-public-subnet-1'

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${ProjectName}-${Environment}-public-subnet-2'

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${ProjectName}-${Environment}-private-subnet-1'

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${ProjectName}-${Environment}-private-subnet-2'

  ModelsBucketName:
    Description: S3 Bucket for ML Models
    Value: !Ref ModelsBucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-models-bucket'

  PredictionsTableName:
    Description: DynamoDB Table for Predictions
    Value: !Ref PredictionsTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-predictions-table'

  RedisEndpoint:
    Description: Redis Cluster Endpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub '${ProjectName}-${Environment}-redis-endpoint'

  RedisPort:
    Description: Redis Cluster Port
    Value: !GetAtt RedisCluster.RedisEndpoint.Port
    Export:
      Name: !Sub '${ProjectName}-${Environment}-redis-port'

  DocumentDBEndpoint:
    Description: DocumentDB Cluster Endpoint
    Value: !GetAtt DocumentDBCluster.Endpoint
    Export:
      Name: !Sub '${ProjectName}-${Environment}-docdb-endpoint'

  DocumentDBPort:
    Description: DocumentDB Cluster Port
    Value: !GetAtt DocumentDBCluster.Port
    Export:
      Name: !Sub '${ProjectName}-${Environment}-docdb-port'

  AppRunnerInstanceRoleArn:
    Description: App Runner Instance Role ARN
    Value: !GetAtt AppRunnerInstanceRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-apprunner-instance-role-arn'

  AppRunnerAccessRoleArn:
    Description: App Runner Access Role ARN
    Value: !GetAtt AppRunnerAccessRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-apprunner-access-role-arn'

  VpcConnectorArn:
    Description: VPC Connector ARN
    Value: !GetAtt VpcConnector.VpcConnectorArn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-vpc-connector-arn'

  AppSecretsArn:
    Description: Application Secrets ARN
    Value: !Ref AppSecrets
    Export:
      Name: !Sub '${ProjectName}-${Environment}-app-secrets-arn'

  DocumentDBSecretArn:
    Description: DocumentDB Credentials Secret ARN
    Value: !Ref DocumentDBSecret
    Export:
      Name: !Sub '${ProjectName}-${Environment}-docdb-secret-arn'
